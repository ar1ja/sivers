-- for <select>
--   <option value="NC">New Caledonia</option>
--   <option value="NZ" selected>New Zealand</option>
-- Return list of all countries as JSONB array with
-- {code: CC, name: Name of Country, selected: '' or ' selected'}
-- Meant to be called inside a bigger query of person's country
create function o.select_country(cc char(2)) returns jsonb as $$
	select jsonb_agg(r) from (
		select code, name,
		case
			when code = $1 then ' selected' else ''
		end as selected
		from countries
		order by name
	) r;
$$ language sql stable;


-- reminder of how this works:

-- INITIAL HTML:

-- <h1>where are you?</h1>
-- <form>
-- <div id="maybeflag"></div>
-- <select id="country" name="country">
--	<option value="CL">Chile</option>
--	<option value="CN">China</option>
--	<option value="CO" selected>Colombia</option>
-- </select>
-- <input name="city" value="Bogota">
-- <div id="maybestate">
-- <input type="hidden" name="state" value="">
-- </div>
-- </form>

-- JAVASCRIPT:

-- #maybeflag:
-- GOAL: show flag to help make sure correct country is chosen
-- function seeflag(cc) sets #maybeflag innerHTML set to flag <img src="/flags/CC.png">
-- On load and when country changed, call seeflag(cc)

-- #maybestate:
-- GOAL1: normalize states in the database, so California is "CA", Victoria is "Vic", England is "ENG", not a hodge-podge
-- GOAL2: encourage state selection in big countries, so cities I don't know will be in context of a state
-- GOAL3: some day, places where state is moot (Singapore, Monaco, etc) will keep it hidden and empty
-- function stateselect(cc, state) has object:
-- const states =
--  {"AU": [{"code":"Vic", "name":"Victoria", "selected":""},{"code":"NSW", "name":"New South Wales", "selected":""}],
--  {"GB": [{"code":"ENG", "name":"England", "selected":" selected"},{"code":"WLS", "name":"Wales", "selected":""}],
-- if states[cc] exists, return innerHTML of
-- <select name="state">
--	<option value="ENG" selected>England</option>
--	<option value="WLS">Wales</option>
-- </select>
-- if states[cc] does not exist? return innerHTML of
-- <input name="state" value="Given Value Here">
-- On load and when country changed, call stateselect(cc, state)

-- PostgreSQL's role?
-- Now that PostgreSQL is also generating the HTML via Mustache templates,
-- Mustache will make HTML select from countries JSON, and JavaScript from states JSON
-- those JSON values are generated by o.select_country() and o.select_state()

